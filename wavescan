#!/usr/bin/env python
# -*- coding: utf-8 -*-

from argparse import ArgumentParser
import re
from pathlib import Path
from os import scandir
import config
import libsfz
import libspeedrum
import liblsp
from libwavescan import warn, print_info

aparser = ArgumentParser()
aparser.add_argument("-d", "--dir", dest="dir", required=True,
                     help="samples directory", metavar="DIR")
aparser.add_argument("--maxhh", dest="maxhh", required=False,
                     help="max closed HiHat duration 1-999 ms",
                     metavar="HH_LEN_MS")
aparser.add_argument("--channel", dest="channel", required=False,
                     help="MIDI channel 1-16 (LSP)", metavar="CHANNEL")
aparser.add_argument("--lsp",
                     action="store_true", dest="lsp", default=False,
                     help="LSP output")
aparser.add_argument("--limit",
                     action="store_true", dest="limit", default=False,
                     help="respect LSP limits and skip extra data")
aparser.add_argument("--sfz-mk",
                     action="store_true", dest="sfz_mk", default=False,
                     help="Add lokey/hikey/pitch instead of just key")
aparser.add_argument("--sfz",
                     action="store_true", dest="sfz", default=False,
                     help="SFZ output")
aparser.add_argument("--speedk",
                     action="store_true", dest="speedk", default=False,
                     help="Speedrum Lite output")
aparser.add_argument("--speedkit",
                     action="store_true", dest="speedkit", default=False,
                     help="Speedrum output")
aparser.add_argument("--no-remap",
                     action="store_true", dest="no_remap", default=False,
                     help="Disable remapping")
aparser.add_argument("--one-out",
                     action="store_true", dest="one_out", default=False,
                     help="One output for all Speedrum pads")
aparser.add_argument("--no-mute",
                     action="store_true", dest="no_mute", default=False,
                     help="Do not mute additional layers")
aparser.add_argument("-D",
                     action="store_true", dest="debug", default=False,
                     help="debug output")
args = aparser.parse_args()
path = Path(args.dir)
if not path.exists():
    exit(f'{path} does not exist')
elif not path.is_dir():
    exit(f'{path} is not directory')

midi_channel = 0
if args.channel:
    if not args.channel.isnumeric():
        exit(f"channel '{args.channel}' not a number")
    midi_channel = int(args.channel)-1
    if not 0 <= midi_channel <= 15:
        exit(f"channel '{args.channel}' is out of range")

if args.lsp:
    bank = liblsp.LSP(args, midi_channel)
elif args.sfz:
    bank = libsfz.SFZ(args)
elif args.speedk or args.speedkit:
    bank = libspeedrum.Speedrum(args)
else:
    bank = None


def scantree(pathname):
    """Recursively yield DirEntry objects for given directory."""
    for entry in scandir(pathname):
        if entry.is_dir(follow_symlinks=False):
            yield from scantree(entry.path)
        else:
            yield entry


re_sample = re.compile(config.SAMPLE, re.I)
re_ignore = re.compile(config.IGNORE, re.I)
c_unparsed = 0
for ent in scantree(path):
    if re_sample.match(ent.name) and not re_ignore.match(ent.path):
        if args.lsp or args.sfz or args.speedk or args.speedkit:
            bank.add(ent)
        else:
            print_info(ent)

if bank is None:
    exit()

if bank.size() == 0:
    warn("nothing found")
    exit()

bank.build()
